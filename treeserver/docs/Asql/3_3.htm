<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=gb2312">
<title>统计</title>
<meta name="GENERATOR" content="Microsoft FrontPage 3.0">
</head>

<body>
<div align="center"><center>

<table border="0" cellpadding="2" width="90%">
  <tr>
    <td width="100%"><p align="center"><strong><span style="font-size: 12px">统计</span></strong></p>
    <p ALIGN="JUSTIFY"><span style="font-size: 12px">统计是查询的一种特例，它相当于满足一定条件的记录的计数或求和。下面通过例子来了解统计条件的写法。</span></p>
    <p ALIGN="JUSTIFY"><span style="font-size: 12px">[例16]处级以上干部的学位及年龄情况</span></p>
    <p ALIGN="JUSTIFY"><span style="font-size: 12px">┌───────┬───────────────────┐<br>
    │ │ 处级以上 │<br>
    │ ├────┬────┬────┬────┤<br>
    │ │ 博 士 │ 硕 士 │ 学 士 │ 无学位 │<br>
    ├──┬────┼────┼────┼────┼────┤<br>
    │ 中 │30~40岁 │ │ │ │ │<br>
    │ 年 ├────┼────┼────┼────┼────┤<br>
    │ 干 │41~45岁 │ │ │ │ │<br>
    │ 部 ├────┼────┼────┼────┼────┤<br>
    │ │46~50岁 │ │ │ │ │<br>
    └──┴────┴────┴────┴────┴────┘</span></p>
    <p ALIGN="JUSTIFY"><span style="font-size: 12px">通常的统计表都是分层的，可以利用条件之间的嵌套来表示这种分层。每一个写有文字的地方表示一定的约束，即是一个条件，最终结果是计数。上表利用嵌套方式可写为：</span></p>
    <p ALIGN="JUSTIFY"><span style="font-size: 12px">行条件：中年干部</span></p>
    <p ALIGN="JUSTIFY"><span style="font-size: 12px">Begin<br>
    #Y1:30~40岁<br>
    #Y2:41~45岁<br>
    #Y3:46~50岁<br>
    End</span></p>
    <p ALIGN="JUSTIFY"><span style="font-size: 12px">列条件：处级以上干部</span></p>
    <p ALIGN="JUSTIFY"><span style="font-size: 12px">Begin<br>
    #X1:博士<br>
    #X2:硕士<br>
    #X3:学士<br>
    #X4:无学位<br>
    End</span></p>
    <p ALIGN="JUSTIFY"><span style="font-size: 12px">利用这种嵌套可以表示任意多层的表的定义，表示完之后就是将每个文字说明变为条件表达式，在最前面写上Statistics 
    statX即可。Statistics可简写为STAT。</span></p>
    <p ALIGN="JUSTIFY"><span style="font-size: 12px">完整的统计条件写法如下：</span></p>
    <p ALIGN="JUSTIFY"><span style="font-size: 12px">Predicate<br>
    long statx[3,4]<br>
    From \tg\data\sub0.dbbf /*指定描述变量和源*/<br>
    CONDITION<br>
    Begin<br>
    stat statX<br>
    age(Birthday)&gt;=30&amp;&amp;age(Birthday)&lt;=50 /*30岁以上50以下，中级干部*/<br>
    Begin<br>
    &nbsp; age(Birthday)&gt;=30&amp;&amp;age(Birthday)&lt;=40<br>
    &nbsp; age(Birthday)&gt;=41&amp;&amp;age(Birthday)&lt;=45<br>
    &nbsp; age(Birthday)&gt;=46&amp;&amp;age(Birthday)&lt;=50<br>
    End<br>
    Past_Rank&lt;=&quot;08&quot;&amp;&amp;Past_Rank&gt;=&quot;09&quot; /*处级以上干部*/<br>
    Begin<br>
    &nbsp; DEGREE_N=&quot;2&quot;&amp;&amp;DEGREE_N=&quot;8&quot; /*博士、副博士*/<br>
    DEGREE_N=&quot;3&quot; /*硕士*/<br>
    DEGREE_N=&quot;4&quot; /*学士*/<br>
    DEGREE_N=&quot; &quot; /*无学位*/<br>
    End<br>
    End<br>
    Action warray (&quot;\\tg\\tj\\tbtest.dbf&quot;,statx) <br>
    /*指定统计结果存于何处*/</span></p>
    <p ALIGN="JUSTIFY"><span style="font-size: 12px">下面，我们再来介绍一下与统计有关的ASQL定义、标识语句。</span></p>
    <ol>
      <li><span style="font-size: 12px"><a NAME="3_3_1">变量定义语句(predicates)</a></span></li>
      <p ALIGN="JUSTIFY"><span style="font-size: 12px"><br>
      它支持int，long，float等类型变量</span></p>
      <p ALIGN="JUSTIFY"><span style="font-size: 12px">格式：predicates</span></p>
      <p ALIGN="JUSTIFY"><span style="font-size: 12px">变量类型 变量或数组名</span></p>
      <p ALIGN="JUSTIFY"><span style="font-size: 12px">[例17]</span></p>
      <p ALIGN="JUSTIFY"><span style="font-size: 12px">predicates<br>
      long statX[m,n]</span></p>
      <p ALIGN="JUSTIFY"><span style="font-size: 12px">这里的statX[m,n]为二维数组变量，m为行，n为列。<br>
      ASQL的变量是由字母打头，后跟字母和数字的字符序列，最长31个字符。</span></p>
      <li><span style="font-size: 12px"><a NAME="3_3_2">计数标识(statistics)</a></span></li>
      <p ALIGN="JUSTIFY"><span style="font-size: 12px"><br>
      格式：statistics 变量数组[，最大行数]</span></p>
      <p ALIGN="JUSTIFY"><span style="font-size: 12px">说明：声明后面对X的定义是计数。[最大行数]表示本次统计运算的最大行数，这个行数不只是计数行行数，也包括求程、平均之类，设置它的目标是为了通知ASQL设置行逻辑标识区，ASQL通常通过#Y后面的最大数来确定行逻辑标识区的大小，但有时用户可能自己用staty()函数来完成行条件的定义，而不用#Y的形式，这时就很有用了。可以省略。</span></p>
      <p ALIGN="JUSTIFY"><span style="font-size: 12px">举例：见例16。</span></p>
      <li><span style="font-size: 12px"><a NAME="3_3_3">求和标识(summer)</a></span></li>
      <p ALIGN="JUSTIFY"><span style="font-size: 12px"><br>
      格式：summer 变量数组，数字型表达式1[，数字型表达式2，……]</span></p>
      <p ALIGN="JUSTIFY"><span style="font-size: 12px">说明：声明后面对X的定义是求和，求和操作是指：</span></p>
      <p ALIGN="JUSTIFY"><span style="font-size: 12px">每次引用summer则，数字型表达式1+数字型表达式2+……，将结果与summer所标识的数组的相应元素相加。</span></p>
      <p ALIGN="JUSTIFY"><span style="font-size: 12px">通常的统计求和运算只有数字型表达式1。</span></p>
      <p ALIGN="JUSTIFY"><span style="font-size: 12px">注意：summer后的求和标识最长为4096个西文字符。</span></p>
      <p ALIGN="JUSTIFY"><span style="font-size: 12px">举例：[例18]</span></p>
      <p ALIGN="JUSTIFY"><span style="font-size: 12px">①summer sumX,age(Birthday)</span></p>
      <p ALIGN="JUSTIFY"><span style="font-size: 12px">/*对年龄求和，存入sumX。下面的几列对X的定义都是做的这一运算，即，满足对联样的X条件，视Y的真假决定对其列是否做些求和动作*/</span></p>
      <p ALIGN="JUSTIFY"><span style="font-size: 12px">X1:……</span></p>
      <p ALIGN="JUSTIFY"><span style="font-size: 12px">X2: ……</span></p>
      <p ALIGN="JUSTIFY"><span style="font-size: 12px">X3:……</span></p>
      <p ALIGN="JUSTIFY"><span style="font-size: 12px">②summer sumX,total_s,duty_s</span></p>
      <p ALIGN="JUSTIFY"><span style="font-size: 12px">对职务岗位工资和技术级别工资求和，存入数组sumX中。</span></p>
      <li><span style="font-size: 12px"><a NAME="3_3_4">平均值标识(average)</a></span></li>
      <p ALIGN="JUSTIFY"><span style="font-size: 12px"><br>
      格式：average 计数用变量数组，存平均值用变量数组，数字型表达式[，数字型表达式，……][计数用变量数组]和[存平均值用变量数组]必须具有相同的维定义，即都是标准二维数组，第一维、第二维大小都相同。</span></p>
      <p ALIGN="JUSTIFY"><span style="font-size: 12px">功能：声明后面对X的定义是求平均，求平均操作是指：数字型表达式1+数字型表达式2+……/引起average运算的次数</span></p>
      <p ALIGN="JUSTIFY"><span style="font-size: 12px">通常的统计求和运算只有数字型表达式1。<br>
      Average的副产品是计数结果存于计数用变量数组。<br>
      average后的求平均标识最长为4096个西文字符。</span></p>
      <p ALIGN="JUSTIFY"><span style="font-size: 12px">举例：</span></p>
      <p ALIGN="JUSTIFY"><span style="font-size: 12px">[例19]</span></p>
      <p ALIGN="JUSTIFY"><span style="font-size: 12px">①average cntX,avgX,age(Birthday)</span></p>
      <p ALIGN="JUSTIFY"><span style="font-size: 12px">/*对年龄平均，存入avgX。下面的几列对X的定义都是做的这一运算，即，满足对联样的X条件，视Y的真假决定对其列是否做些求和动作*/</span></p>
      <p ALIGN="JUSTIFY"><span style="font-size: 12px">X1:……</span></p>
      <p ALIGN="JUSTIFY"><span style="font-size: 12px">X2: ……</span></p>
      <p ALIGN="JUSTIFY"><span style="font-size: 12px">X3:……</span></p>
      <p ALIGN="JUSTIFY"><span style="font-size: 12px">②average cntX,sumX,total_s,duty_s</span></p>
      <p ALIGN="JUSTIFY"><span style="font-size: 12px">对职务岗位工资和技术级别工资求和，存入数组sumX中。最后除以求了多少次和，算得平均值。</span></p>
      <li><span style="font-size: 12px"><a NAME="3_3_5">求最大值标识(max)</a></span></li>
      <p ALIGN="JUSTIFY"><span style="font-size: 12px"><br>
      格式：max 变量数组，数字型表达式1[，数字型表达式2，……]</span></p>
      <p ALIGN="JUSTIFY"><span style="font-size: 12px">说明：声明后面对X的定义是求和，求和操作是指：</span></p>
      <p ALIGN="JUSTIFY"><span style="font-size: 12px">每次引用max则，max(数字型表达式1,数字型表达式2+……)，将结果与max所标识的数组的相应元素比较，用其中较大者更新它。</span></p>
      <p ALIGN="JUSTIFY"><span style="font-size: 12px">通常的统计求最大值运算只有数字型表达式1。</span></p>
      <p ALIGN="JUSTIFY"><span style="font-size: 12px">注意：max后的求和标识最长为4096个西文字符。</span></p>
      <p ALIGN="JUSTIFY"><span style="font-size: 12px">举例：</span></p>
      <p ALIGN="JUSTIFY"><span style="font-size: 12px">[例20]</span></p>
      <p ALIGN="JUSTIFY"><span style="font-size: 12px">①max maxX,age(Birthday)</span></p>
      <p ALIGN="JUSTIFY"><span style="font-size: 12px">/*对年龄求最大值，存入maxX。下面的几列对X的定义都是做的这一运算，即，满足对联样的X条件，视Y的真假决定对其列是否做些求和动作*/</span></p>
      <p ALIGN="JUSTIFY"><span style="font-size: 12px">X1:……</span></p>
      <p ALIGN="JUSTIFY"><span style="font-size: 12px">X2: ……</span></p>
      <p ALIGN="JUSTIFY"><span style="font-size: 12px">X3:……</span></p>
      <p ALIGN="JUSTIFY"><span style="font-size: 12px">②max maxX,total_s,duty_s</span></p>
      <p ALIGN="JUSTIFY"><span style="font-size: 12px">对职务岗位工资和技术级别工资求和，存入数组maxX中。</span></p>
      <p ALIGN="JUSTIFY">　</p>
      <li><span style="font-size: 12px"><a NAME="3_3_6">求最小值标识(min)</a></span></li>
      <p ALIGN="JUSTIFY"><span style="font-size: 12px"><br>
      格式：min 变量数组，数字型表达式1[，数字型表达式2，……]</span></p>
      <p ALIGN="JUSTIFY"><span style="font-size: 12px">说明：声明后面对X的定义是求和，求和操作是指：</span></p>
      <p ALIGN="JUSTIFY"><span style="font-size: 12px">每次引用min则，min(数字型表达式1,数字型表达式2+……)，将结果与max所标识的数组的相应元素比较，用其中较小者更新它。</span></p>
      <p ALIGN="JUSTIFY"><span style="font-size: 12px">通常的统计求最小值运算只有数字型表达式1。</span></p>
      <p ALIGN="JUSTIFY"><span style="font-size: 12px">注意：min后的求和标识最长为4096个西文字符。</span></p>
      <p ALIGN="JUSTIFY"><span style="font-size: 12px">举例：</span></p>
      <p ALIGN="JUSTIFY"><span style="font-size: 12px">[例21]</span></p>
      <p ALIGN="JUSTIFY"><span style="font-size: 12px">①min minX,age(Birthday)</span></p>
      <p ALIGN="JUSTIFY"><span style="font-size: 12px">/*对年龄求最小值，存入maxX。下面的几列对X的定义都是做的这一运算，即，满足对联样的X条件，视Y的真假决定对其列是否做些求和动作*/</span></p>
      <p ALIGN="JUSTIFY"><span style="font-size: 12px">X1:……</span></p>
      <p ALIGN="JUSTIFY"><span style="font-size: 12px">X2: ……</span></p>
      <p ALIGN="JUSTIFY"><span style="font-size: 12px">X3:……</span></p>
      <p ALIGN="JUSTIFY"><span style="font-size: 12px">②min minX,total_s,duty_s</span></p>
      <p ALIGN="JUSTIFY"><span style="font-size: 12px">对职务岗位工资和技术级别工资求和，存入数组minX中。</span></p>
      <li><span style="font-size: 12px"><a NAME="3_3_7">应用举例</a></span></li>
      <p ALIGN="JUSTIFY"><span style="font-size: 12px"><br>
      例1</span></p>
      <p ALIGN="JUSTIFY"><span style="font-size: 12px">报表格式如下：</span></p>
      <p ALIGN="CENTER"><span style="font-size: 12px"><img SRC="../asql/images/Image16.gif"
      WIDTH="308" HEIGHT="261"></span></p>
      <p ALIGN="JUSTIFY"><span style="font-size: 12px">其ASQL脚本为：</span></p>
      <p ALIGN="JUSTIFY"><span style="font-size: 12px">PREDICATEs<br>
      LONG table[3,3]<br>
      FROM L.DBF<br>
      CONDITION<br>
      BEGIN<br>
      #Y1 DEL=&quot; &quot;&amp;&amp;BIRTHDAY&gt;=&quot;1960****&quot; <br>
      #Y2 DEL=&quot; 
      &quot;&amp;&amp;BIRTHDAY&gt;=&quot;1950****&quot;&amp;&amp;BIRTHDAY&lt;&quot;1960****&quot; 
      <br>
      #Y3 DEL=&quot; &quot;&amp;&amp;BIRTHDAY&lt;&quot;1950****&quot; <br>
      SUM table,TOTAL_S<br>
      #X1<br>
      SUM table,DUTY_S<br>
      #X2<br>
      SUM table,TOTAL_S,DUTY_S<br>
      #X3<br>
      END</span></p>
      <p ALIGN="JUSTIFY"><span style="font-size: 12px">以上是一个按年龄段的工资统计报表，在统计库L.DBF中有以下域：</span></p>
      <p ALIGN="JUSTIFY"><span style="font-size: 12px">DEL 删除域，空为现员(非删除)。<br>
      BIRTHDAY 为出生年月。<br>
      TOTAL_S 为职务岗位工资, DUTY_S 为技能级别工资。</span></p>
      <p ALIGN="JUSTIFY"><span style="font-size: 12px">注意，ASQL语法中规定字符串的比较是一种非精确比较，例如：&quot;ab&quot;等于&quot;abc&quot;，即表达式&quot;ab&quot;=&quot;abc&quot;的运算结果为&quot;真&quot;。比如，&quot;*&quot;可匹配任何字符，所以&quot;1960&quot;与&quot;1960****&quot;是等价的，表达式BIRTHDAY&gt;=&quot;1960****&quot;与表达式BIRTHDAY&gt;=&quot;1960&quot;是等价的。</span></p>
      <p ALIGN="JUSTIFY"><span style="font-size: 12px">另外，在求年龄上应注意AGE()函数算出的精确年龄。比如，今年是1996年，求AGE(&quot;19690713&quot;)的结果不一定是1996-1969=27，还要看该人出生的月份、天。AGE()函数是算人的生日距当前日期(年、月、日)一共多少天，该天数再除以365而得到的整数。有些情况下不需要如此精确，可采用下面表达式：</span></p>
      <p ALIGN="JUSTIFY"><span style="font-size: 12px">sysdate('y')-VAL(SUBSTR(BIRTHDAY),1,4)</span></p>
      <p ALIGN="JUSTIFY"><span style="font-size: 12px">在统计条件的末尾通常要调用函数warray()，将结果存到文件中去。warray()函数还具有拼表能力，即将几张具有相同行数的表合成一个表。</span></p>
      <p ALIGN="JUSTIFY"><span style="font-size: 12px">例2</span></p>
      <p ALIGN="CENTER"><span style="font-size: 12px"><img SRC="../asql/images/Image17.gif"
      WIDTH="401" HEIGHT="198">　 </span></p>
      <p ALIGN="JUSTIFY"><span style="font-size: 12px">这张表看起来很简单，但是却包含了两种类型的统计：计数和求值。如何用ASQL算出这张表来呢？我们还是按照ASQL构造统计条件的指导流程来做。</span></p>
      <p ALIGN="JUSTIFY"><span style="font-size: 12px">首先将表写为嵌套的语言描述式，将不同性质的统计在列上分开。</span></p>
      <p ALIGN="JUSTIFY"><span style="font-size: 12px">计数</span></p>
      <p ALIGN="JUSTIFY"><span style="font-size: 12px">BEGIN<br>
      #Y1:局级<br>
      #Y2:处级<br>
      #Y3:科级<br>
      #Y4:未定级<br>
      #X1:所有人<br>
      END</span></p>
      <p ALIGN="JUSTIFY"><span style="font-size: 12px">求DUTY_S的和<br>
      BEGIN<br>
      #Y1:局级<br>
      #Y2:处级<br>
      #Y3:科级<br>
      #Y4:未定级<br>
      #X1:所有人<br>
      END</span></p>
      <p ALIGN="JUSTIFY"><span style="font-size: 12px">将上面的计数子表和求和子表合并成一个表，然后再将用自然语言表达的条件翻译为ASQL表达式。</span></p>
      <p ALIGN="JUSTIFY"><span style="font-size: 12px">这张表的ASQL语言语法描述如下：</span></p>
      <p ALIGN="JUSTIFY"><span style="font-size: 12px">/*分级别统计技能工资总和，假定数据库为.DBF，级别域为POST_RANK，技能工资域为DUTY_S*/</span></p>
      <p ALIGN="JUSTIFY"><span style="font-size: 12px">PREDICATION<br>
      LONG L[4,1]<br>
      FLOAT F[4,1]<br>
      FROM .DBF<br>
      CONDITION<br>
      BEGIN<br>
      STAT L<br>
      #Y1:POST_RANK=&quot;局级&quot;<br>
      #Y2:POST_RANK=&quot;处级&quot;<br>
      #Y3:POST_RANK=&quot;科级&quot;<br>
      #Y4:POST_RANK=&quot;未定级&quot;<br>
      #X1:<br>
      SUM F,DUTY_S<br>
      #X1： </span></p>
      <p><span style="font-size: 12px">/*注意这里是X1，而不是X2，因为虽然第二张子表与第一张共用了行条件， 
      但列条件还要从1开始。但是如果求和结果还是放到L中去，此时L被定义为： 
      </span></p>
      <p><span style="font-size: 12px">LONG L[4,2]</span></p>
      <p ALIGN="JUSTIFY"><span style="font-size: 12px">这时这里写的就是 #X2了，而上一行则被写成：SUM 
      L , DUTY_S */</span></p>
      <p ALIGN="JUSTIFY"><span style="font-size: 12px">END<br>
      ACTION WARRAY(&quot;example.dbf&quot;,L,F)</span></p>
      <li><span style="font-size: 12px"><a NAME="3_3_8">行列数需通过计算的统计表</a><br>
        <br>
        举例说明。如下面一张表所示，其ASQL脚本可以写为：<br>
        <br>
        <img SRC="../asql/images/Image18.gif" WIDTH="372" HEIGHT="358"><br>
        <br>
        /*假定表ahsjk.dbf 中有域出生年月日BIRTHDAY，字符型，爱好标识ENJOY_ID，数字型*/</span><p
        ALIGN="JUSTIFY"><span style="font-size: 12px">PREDICATES<br>
        LONG x[100,10]<br>
        FROM ahsjk.dbf<br>
        CONDITION<br>
        BEGIN<br>
        STATISTICS x,100<br>
        age(BIRTHDAY)&lt;100 $ staty(age(BIRTHDAY))<br>
        ENJOY_ID&lt;10 $ statx(ENJOY_ID)<br>
        END</span></p>
      </li>
    </ol>
    </td>
  </tr>
</table>
</center></div>
</body>
</html>
